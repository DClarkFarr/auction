generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    role      ROLES    @default(user)
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Bid        Bid[]
    stripeUser StripeUser?
}

model Product {
    id_product        Int              @id @default(autoincrement())
    sku               String?
    name              String
    priceCost         Float?
    priceInitial      Float?
    priceRetail       Float?
    initialQuantity   Int              @default(1)
    remainingQuantity Int              @default(1)
    quality           Int              @default(5)
    description       String?          @db.MediumText
    createdAt         DateTime?        @default(now())
    updatedAt         DateTime?        @updatedAt
    detailItems       Json?
    auctionBatchCount Int              @default(1)
    scheduledFor      DateTime?
    slug              String
    status            PRODUCT_STATUSES @default(inactive)

    categories ProductCategories[]
    tags       ProductTags[]
    items      ProductItem[]
    bids       Bid[]
}

model ProductItem {
    id_item     Int                 @id @default(autoincrement())
    id_product  Int
    id_purchase Int?
    expiresAt   DateTime
    createdAt   DateTime?           @default(now())
    expiredAt   DateTime?
    purchasedAt DateTime?
    rejectsAt   DateTime?
    rejectedAt  DateTime?
    canceledAt  DateTime?
    status      PRODUCT_ITEM_STATUS @default(active)

    product Product @relation(fields: [id_product], references: [id_product])
    bids    Bid[]

    @@index([id_product])
}

model Bid {
    id_bid     Int        @id @default(autoincrement())
    id_product Int
    id_item    Int
    id_user    Int
    amount     Int
    status     BID_STATUS
    createdAt  DateTime?  @default(now())

    product Product     @relation(fields: [id_product], references: [id_product])
    item    ProductItem @relation(fields: [id_item], references: [id_item])
    user    User        @relation(fields: [id_user], references: [id])

    @@index([id_product])
    @@index([id_item])
    @@index([id_user])
}

model Tag {
    id_tag   Int           @id @default(autoincrement())
    label    String
    slug     String
    products ProductTags[]
}

model Category {
    id_category Int                 @id @default(autoincrement())
    label       String
    slug        String
    products    ProductCategories[]
}

model Image {
    id_image     Int                  @id @default(autoincrement())
    resourceType IMAGE_RESOURCE_TYPES
    resourceId   Int
    path         String
    alt          String

    @@index([resourceType, resourceId], map: "type_id")
}

model ProductTags {
    relId     Int     @id @default(autoincrement())
    productId Int
    tagId     Int
    product   Product @relation(fields: [productId], references: [id_product])
    tag       Tag     @relation(fields: [tagId], references: [id_tag])

    @@unique([productId, tagId])
    @@index([productId], map: "ProductTags_productId_fkey")
    @@index([tagId])
}

model ProductCategories {
    relId      Int      @id @default(autoincrement())
    productId  Int
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id_category])
    product    Product  @relation(fields: [productId], references: [id_product])

    @@index([categoryId], map: "ProductCategories_categoryId_fkey")
    @@index([productId])
}

model SiteSettings {
    id    Int    @id @default(autoincrement())
    key   String
    value Json

    @@unique([key])
}

model StripeUser {
    id_stripe_user Int       @id @default(autoincrement())
    id_user        Int       @unique
    id_external    String
    id_card        String?
    createdAt      DateTime? @default(now())

    user User @relation(fields: [id_user], references: [id])
}

model sessions {
    session_id String  @id @db.VarChar(128)
    expires    Int     @db.UnsignedInt
    data       String? @db.MediumText
}

enum ROLES {
    admin
    user
}

enum IMAGE_RESOURCE_TYPES {
    product
    category
}

enum PRODUCT_STATUSES {
    active
    inactive
    scheduled
    archived
    sold
}

enum BID_STATUS {
    active
    inactive
}

enum PRODUCT_ITEM_STATUS {
    active // auction still ongoing
    purchased // was bought
    rejected // somebody bid, but didn't pay
    expired // nobody bid
    canceled // when product is changed to inactive
}
