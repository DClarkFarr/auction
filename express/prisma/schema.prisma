generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    role      ROLES    @default(user)
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id_product        Int                 @id @default(autoincrement())
    sku               String?
    name              String
    priceCost         Float?
    priceInitial      Float?
    priceRetail       Float?
    initialQuantity   Int                 @default(1)
    remainingQuantity Int                 @default(1)
    quality           Int                 @default(5)
    description       String?             @db.MediumText
    createdAt         DateTime?           @default(now())
    updatedAt         DateTime?           @updatedAt
    detailItems       Json?
    auctionBatchCount Int                 @default(1)
    scheduledFor      DateTime?
    slug              String
    status            PRODUCT_STATUSES    @default(inactive)
    categories        ProductCategories[]
    tags              ProductTags[]
}

model Tag {
    id_tag   Int           @id @default(autoincrement())
    label    String
    slug     String
    products ProductTags[]
}

model Category {
    id_category Int                 @id @default(autoincrement())
    label       String
    slug        String
    products    ProductCategories[]
}

model Image {
    id_image     Int                  @id @default(autoincrement())
    resourceType IMAGE_RESOURCE_TYPES
    resourceId   Int
    path         String
    alt          String

    @@index([resourceType, resourceId], map: "type_id")
}

model ProductTags {
    productId Int
    tagId     Int
    product   Product @relation(fields: [productId], references: [id_product])
    tag       Tag     @relation(fields: [tagId], references: [id_tag])

    @@id([tagId, productId])
    @@index([productId], map: "ProductTags_productId_fkey")
}

model ProductCategories {
    productId  Int
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id_category])
    product    Product  @relation(fields: [productId], references: [id_product])

    @@id([productId, categoryId])
    @@index([categoryId], map: "ProductCategories_categoryId_fkey")
}

model sessions {
    session_id String  @id @db.VarChar(128)
    expires    Int     @db.UnsignedInt
    data       String? @db.MediumText
}

enum ROLES {
    admin
    user
}

enum IMAGE_RESOURCE_TYPES {
    product
}

enum PRODUCT_STATUSES {
    active
    inactive
    scheduled
    archived
    sold
}
